Day1:

We build separate projects for different modules to properly organize and resuse our code.
The url consists of http://domain/controller/actionMethod/id. For each controller we can have many action methods
By default we are viewing the index action method under home controller. We can change this in program.cs.
In the controller class, action methods, return View(); will return the view with corresponding method name.
We can also specify the view we want to return by using return View("test"); which will return Test.cshtml. Not case sensitive.

ApplicationCore is the base project for the application
Entities in ApplicationCore will have objects that represent our DB tables
Models -> will have objects that represent your UI


Dapper is from StackOverflow

Services -> Domain/BUsiness Logic
e.g. GetJobById , Send Confirmation Email, Get All jobs

Controller => Services => Repositories(using EF Core or Dapper or ADO.NET ) -> Database

The interfaces in contracts under ApplicationCore will be implemented in Infrastructure


Day2:Dependency Injection

Older versions dotnet framework use : Njinject and autofac to use Denpendency injection
Now dotnet core has built-in Dependency Injection 
if you need to use advanced Dependency Injection(e.g. property Injection, method Injection, conditional Injection),
You still need to use Njinject and autofac(more popular)

Dependency injection is used to build loosly coupled code/application
to have your code maintainable and testable

ADO.NET ==> lower level API -> write lots of code
Dapper is micro ORM(object relational mapping) from StackOverflow. A bunch of extensions built on ADO.NET. 
Need to have an existing DB to use Dapper. (e.g. Northwind, AdventureWorks)
var employees = db.connection.execute <Employees> ("select * from Employee")
var employees = db.connection.execute <Employees>  ("usp_GetEmployee")

ORM => Object Relational Mapper
data access code simpler and write less code

Entity Framework -> Saves lots of time in creating/accessing the database
1. you can create complete DB using C# code with code-first appraoch , using concept called Migrations
2. you can access database and CRUD operations with just C#(LINQ) without writing any SQL
    Dapper/ADO.NET => SELECT * from Jobs where salary > 60000
    EF             => var employees = Employee.where(e => e.Salary > 60000).ToList(); 
                                        SELECT * from Jobs where salary > 60000
                      var employees = Employee.ToList().where(e => e.Salary > 60000).ToList(); 
                                        SELECT * from Jobs;
                                        then the filter > 60000 is gonna happen in memory
3. can map the data to C# Entities


Day3: create DB

Jobs => Jobs Info, ID, Title, Desc, JobCode
Candidate => Candidates
Submission => when candidates apply for the job [Candidate & JobId] => Unique constraints
JobStatusLookUp => Open, Closed, pending closed, postponed

step1: Install EF Core tools package globally
dotnet tool update --global dotnet-ef
dotnet tool install --global dotnet-ef



step2: First create an entity -> C# object that represents a table in the DB(Job.cs)


step3: Install required EF Core packages from Nuget in projects
    Microsoft.EntityFrameworkCore.SqlServer(in all three projects)
    Microsoft.EntityFrameworkCore.Design(in RecuitingWeb)


step4: In EF we have 2 very important classes
    DbContext => Represents your database
    DbSet => Represents your tables


step5: create the DbContext class and DbSet properties for the project(in Infrastructure)


step6: Create the Database ConnectionString, and establish that connectionString with the DbContext
        Keep Connection Strings if locally in the project in appsettings.json(most unsecure)
        user secrets(locally)
        Azure KeyVault
Run this to get name of device:
SELECT @@SERVERNAME

ConnectionString:
For Mac: "RecruitingDbConnection": "Server=localhost;Database=RecruitingDb;User=sa;Password=Antra300@@;TrustServerCertificate=True;"
For Windows: "RecruitingDbConnection": "Server=Abhilash-PC;Database=RecruitingDb;Integrated Security=True;TrustServerCertificate=True;"

step7: establish that connectionString with the DbContext using DI using the AddDbContext method

step8: Create your first Migration using dotnet ef tools commands
//-p (stands for property) tells which project to use.
//We are in the RecruitingWeb Dir, we have our Program.cs and appsettings in RecruitingWeb
//But we have the Data(DbContext) in Infrastructure
dotnet ef migrations add InitialMigration -p ../Infrastructure/Infrastructure.csproj 

some links:
https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli


step9: always, check your migration file and see if it has things that you are trying to create


step10: Apply the migration using command
        dotnet ef database update 

step11: To model your database with rules, constraints etc we can do this in two ways
        1. Data Annotations(annotate constraints in the jobs entity and .net will convert it for you)
        2. Fluent API(if you have conflict rules for the same property, fluent API will take precedence)

    dotnet ef migrations add UpdateingJobsTable -p ../Infrastructure/Infrastructure.csproj
    dotnet ef database update
    To remove a migration:
    dotnet ef migrations remove -p ../Infrastructure/Infrastructure.csproj
always use code-first approach if you want to change the schemas! You can change data using sql, but not schemas


Create a foreign key:
https://learn.microsoft.com/en-us/ef/core/modeling/relationships?tabs=fluent-api%2Cfluent-api-simple-key%2Csimple-key



Day4: async

asynchronous programming -> 2002
async/await -> 2012 .net framework 4.5
to prevent thread starvation, and add scalability of our application
Thread Starvation: when you run out threads in the thread pool

public async Task<IActionResult> Index()
        {
            var jobs = await _jobService.GetAllJobs(); -> returning task. note:ToList() is synchronous method, we should use ToListAsync()
            return View();
            
        }

it will not add new threads, it will use existing threads properly

3 ways we cans send data from controller/action method to view

1. ViewBag
2. ViewData
most frequently used way:
3. ***Strongly Typed Model data***

<a asp-action="Create">Create New</a> ==> asp-action is tag helper(preferred one)
@Html.DisplayFor(modelItem => item.NumberOfPositions)  ==> this is html helper(Introduced in .net core)


Two ways to generate the view from controller/action:
1. the UI way(create a view using add -> View -> Razor View, see screenshot in notes in the recording folder)

2. using the terminal:

install the tool:
dotnet tool install -g dotnet-aspnet-codegenerator
dotnet-aspnet-codegenerator view Index list -m JobResponseModel  -outDir Views/jobs  -udl  -scripts
Index: View name
list: template
-m JobResponseModel: the model
-udl: use default layout


Day5: .Net Core Validation and Middleware
First create a view for job posting(create):
dotnet-aspnet-codegenerator view Create create -m JobRequestModel -outDir Views/jobs -udl -scripts

Validation happen on both client and server side, but server side is more important. Because we can make a POST
request without a client(like using POSTMAN)

To do validation we use Data Annotations

form-control: uses bootstrap. bootstrap can help build responsive sites by adjusting to different devices

when you post the form, you can send the data with the name tags as key-value pairs!(So name and ID are both important)
model-binding: the data from the browser will be sent to the model and the object(model) properties will be mapped to the data
you can also map the values to parameters in the function arguments like:
public async Task<IActionResult> Create(JobRequestModel model, string Location) ==> you can map locaion to the parameter Location



public async Task<int> AddtAsync(T Entity)
        {
            _dbContext.Set<T>().Add(Entity);
            await _dbContext.SaveChangesAsync();
            return 1;
        }
in this method we have to write await _dbContext.SaveChangesAsync();
Add(Entity) will create a temporary entity, but SaveChangesAsync() will 
actually commit the changes to the database


The Id(PK) will be automatically generated. PK will auto increase(even if insertion failed)


https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-7.0
https://learn.microsoft.com/en-us/aspnet/core/fundamentals/middleware/?view=aspnetcore-7.0#built-in-middleware
Middleware -> a piece of software plugged into the http pipeline. The order of middleware is very important


Request -> M1(check the user is authenticated, check the http header and maybe read some http info)
    M2 (some logic)
    M3
Response 
    
    
    Built-in-Middleware
    Custom middlewares
    Register them in proper order(In Program.cs)

HttpContext is an object that's going to capture all information regarding an http Request&Response

HW for Day 5:

Home Page list all the jobs -> for each and every job you should give option(link) to see submissions for the job
Click on Job Title should go to Jobs/Details -> Apply button(POST) to submissions table
    Candidate FirstName, LastName, Email(show Job Code and Title)
    When saving the submission check if a submission already exists for that Email
Create New Job Button on Jobs list page 
    Create New Job should be using Validations and also should have dropdown(research) for JobStatus 
    Create New Job and save to Database
    




Filters ->




day6: API

REST API
REST: a guideline for creating API

Company ABC

Apply for the Jobs -> 
.NET Team Web APP using MVC C#, SQL Server Database

Create an API(REST, Http), old API Web Services SOAP

number of endpoints -> based on HTTP verbs GET, POST, PUT, DELETE
GET http://recruiting.com/api/jobs -> List of Jobs sorted by Created date 
GET http://recruiting.com/api/jobs/1 -> Details of the Job 
POST http://recruiting.com/api/jobs -> Admin will create a new Job

POST http://recruiting/api/submissions -> Apply for the Job by Candidate
GET http://recruiting/api/submissions/jobs/1 -> Get all the submissions for a particular Job 

Provide a proper Documentation
Swagger


Mobile
IOS(swift) and Android(Java) app -> 
list of Jobs => call the Recruiting API end points 
GET http://recruiting.com/api/jobs -> 


Build WebRecruiting.API:(add scaffold item, empty API controller)
add references for ApplicationCore and Infrastructure
copy all the DI registration including DbContext into API project program.cs
copy connection string to appsettings



day7: Microservices and containerization

monolithic architecture: a big application, not broken down into microservices(if one servive goes down, everything goes down)
microservices: fairly new application, fault tolerance
intended to be independent. May need to have repitition on the data.


.net monorepo microservices architecture


add a controller in API: add new scaffolded item


Process:
In program.cs:
//if (app.Environment.IsDevelopment())
//{
    app.UseSwagger();
    app.UseSwaggerUI();
//}

comment the if statement out when you publish your application because you are no longer in Development
To keep using Swagger

1. publish your application(to folder when in Development)
2. add docker support(create a docker file). Move this docker file to the root(HRM/)


In Dockerfile:
ENV MSSQLConnectionString='Server = JunyiMSI;Database = RecruitingDb;Integrated Security = True;TrustServerCertificate = True;'
//when copy connection string to DockerFile: no white spaces and use Single quote!
FROM mcr.microsoft.com/dotnet/aspnet:7.0-bullseye-slim-amd64 AS base
RUN dotnet publish "Recruiting.API.csproj" -c Release -o /app/publish -r linux-x64 --self-contained false /p:UseAppHost=false


build the docker image:(cd to HRM/)
docker build -t recruitingapi .

-t means tag
. means find "Dockerfile" in the current folder. So use the dockerfile for the microservice you need
and name it "Dockerfile". When you finish building, name it back to Dockerfile.Recruiting


day8: CI/CD and DevOps


??????


day9 .net core identity


1. Admins can create jobs and can see the submissions
2. Admins can close a job
3. Admins can schedule an interview
4. Admins can create OnBoarding process, creating employees, editing employee Details

5. Employees should be able to see their info only when they log in
6. Candidates can see only their submissions


7. Interviewers can see what interviews they need to do 

//public information
8. List of jobs, searching for jobs, job Details


We should be able to create account

User -> Id, FirstName, LastName, password, email, salt, createdDate

Encryption -> CC, SSN, PI, Health, Security answers

Hasing the password with Salt

U1 -> test@test.com (abc123!! + abdjasdj) HashingAlg1 -> skffsdakjfhksdahfk
U2 -> test2@test.com (abc123!! + hfskjadhfkj) HashingAlg1 -> asdasfdsadffasdf

Login -> test@test.com abc123!! (abc1231!! + abdjasdj) HashingAlg1 vgsfshhjjdaj(compare the hasing code)

use the framework: ASP.NET Core identity + EF Core -> SqlServer


In authentication, install: Microsoft.AspNetCore.Identity.EntityFrameworkCore and EntityFrameworkCore.Design
 



 day10 JWT authentication

 Cookies => Web


POST -> http://example.com/api/account/login ->  email/password
        verify the email/password and send the JWT back to the client


SPA(Angular/React) -> localstorage
SPA: single page application

interviews
GET -> http://example.com/api/interviews  -> InterviewController, GetAllInterviews()
    
    JWT(dfasdfasdfsgfasdfgdfasgasdgfgasdf) HTTP header
    Role of Admin

    [Authorize]
    Middleware

POST -> http://example.com/api/interviews


OnBoarding
GET -> http://example.com/api/employees
POST -> http://example.com/api/employees


